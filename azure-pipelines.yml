pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_VERSION: '3.6.3'
  JAVA_HOME_PATH: '/usr/lib/jvm/java-1.8.0-openjdk-amd64'
  AKS_NAME: 'your_aks_name'
  IS_HOME_PATH: '/home/charindut/IS/Code_Bases/wso2-is-sync-manager/wso2is-7.0.0'

  # Define the following variables in the Azure DevOps pipeline
  # AZURE_SUBSCRIPTION_ID: 'your_subscription_id'
  # AZURE_RESOURCE_GROUP: 'your_resource_group'
  # ACR_NAME: 'acrasgardeomainrnd001'
  # ACR_LOGIN_SERVER: 'your_acr_login_server'
  # ACR_USERNAME: 'your_acr_username'
  # ACR_PASSWORD: 'your_acr_password'
  # VM_USER: 'your_vm_username'
  # VM_HOST: 'your_vm_ip_or_hostname'
  # SSH_PRIVATE_KEY: 'your_ssh_private_key_secret'

stages:
- stage: BuildAndPush
  jobs:
  - job: BuildAndPushJob
    steps:
    - script: |
        # Install Java 8
        sudo apt-get update
        sudo apt-get install -y openjdk-8-jdk

        # Set Java 8 as default
        sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8-openjdk-amd64/bin/java 1
        sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac 1
        sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/bin/java
        sudo update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac

        # Verify Java installation
        java -version
        javac -version
      displayName: 'Install and Set Java 8 as Default'
      
    - script: |
        # Specify the Maven version you want to install
        MAVEN_VERSION=${{ parameters.PROJECT_VERSION }}

        # Remove existing Maven installation (if any)
        sudo rm -rf /opt/apache-maven-*
        sudo rm -rf /usr/local/bin/mvn

        # Download specified Maven version
        wget "https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz"

        # Extract Maven archive
        sudo tar xf "apache-maven-$MAVEN_VERSION-bin.tar.gz" -C /opt/

        # Create a symbolic link to the new Maven installation
        sudo ln -s "/opt/apache-maven-$MAVEN_VERSION" /opt/maven
        sudo ln -s "/opt/maven/bin/mvn" /usr/local/bin/mvn

        # Clean up downloaded archive
        rm "apache-maven-$MAVEN_VERSION-bin.tar.gz"

        # Verify installation
        mvn -version
      displayName: Changing mvn version

    - script: |
        echo "## Setting JAVA_HOME and IS_HOME_PATH"
        echo "export JAVA_HOME=${JAVA_HOME_PATH}" >> ./Build.sh
        echo "export IS_HOME=${IS_HOME_PATH}" >> ./Build.sh
      displayName: 'Set Environment Variables for Build.sh'

    - script: |
        # Download WSO2 IS 7.0.0 pack
        wget "https://github.com/wso2/product-is/releases/download/v7.0.0/wso2is-7.0.0.zip"
        unzip wso2is-7.0.0.zip -d /home/charindut/IS/Code_Bases/wso2-is-sync-manager/
        rm wso2is-7.0.0.zip
      displayName: 'Download and Unzip WSO2 IS 7.0.0 Pack'

    - script: |
        echo "Building the Agent jar files"

        cd SyncAgent-read
        JAVA_HOME=$JAVA_HOME_PATH mvn clean install
        cd ..

        cd SyncAgent-write
        JAVA_HOME=$JAVA_HOME_PATH mvn clean install
        cd ..

        echo "Copying the Agent jar files to the WSO2 IS 7.0.0"
        rm $IS_HOME_PATH/repository/components/dropins/com.sync.tool-1.0-SNAPSHOT.jar
        cp SyncAgent-read/target/com.sync.tool-1.0-SNAPSHOT.jar $IS_HOME_PATH/repository/components/dropins/

        rm $IS_HOME_PATH/repository/components/dropins/org.wso2.custom.user.operation.event.listener-1.0-SNAPSHOT.jar
        cp SyncAgent-write/target/org.wso2.custom.user.operation.event.listener-1.0-SNAPSHOT.jar $IS_HOME_PATH/repository/components/dropins/

        echo "Copying the reference.conf configuration files to the WSO2 IS 7.0.0"
        rm $IS_HOME_PATH/repository/conf/reference.conf
        cp config/reference.conf $IS_HOME_PATH/repository/conf/

        echo "Copying the deployment.toml configuration files to the WSO2 IS 7.0.0"
        rm $IS_HOME_PATH/repository/conf/deployment.toml
        cp config/deployment.toml $IS_HOME_PATH/repository/conf/

        echo "Copying the libraries to the WSO2 IS 7.0.0"
        cp lib/* $IS_HOME_PATH/repository/components/lib/
        cp dropins/* $IS_HOME_PATH/repository/components/dropins/

        echo
        echo "Build Completed Successfully"
      displayName: 'Build Project'

    - script: |
        ACR_NAME=acrasgardeomainrnd001
        IMAGE_NAME=is7.0
        TAG=active
        
        docker build -t $IMAGE_NAME:$TAG .

        docker tag $IMAGE_NAME:$TAG $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
        
        docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_LOGIN_SERVER: $(ACR_LOGIN_SERVER)
        ACR_USERNAME: $(ACR_USERNAME)
        ACR_PASSWORD: $(ACR_PASSWORD)
      displayName: 'Build and Push Docker Image'
      
- stage: Deploy
  jobs:
  - job: DeployJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
      displayName: 'Use Python 3.x'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION_ID)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group $(AZURE_RESOURCE_GROUP) --name $(AKS_NAME) --overwrite-existing
      displayName: 'Get AKS Credentials'

    - task: InstallSSHKey@0
      inputs:
        sshKeySecureFile: $(SSH_KEY_SECURE_FILE)
        hostName: $(VM_HOST)
        user: $(VM_USER)
        privateKey: $(SSH_PRIVATE_KEY)
      displayName: 'Install SSH Key'

    - task: SSH@0
      inputs:
        sshEndpoint: 'SSH_Service_Connection' # Define a service connection in Azure DevOps
        runOptions: inline
        inline: |
          # Clone the repo on the VM
          git clone https://github.com/your/repo.git
          cd repo

          # Configure IS
          cp path/to/isDeploymentTOML.yaml /path/to/deployment.toml
          cp path/to/isENV.yaml /path/to/.env

          # Run Deploy.sh
          export AZURE_SUBSCRIPTION_ID=$(AZURE_SUBSCRIPTION_ID)
          export AZURE_RESOURCE_GROUP=$(AZURE_RESOURCE_GROUP)
          export AKS_NAME=$(AKS_NAME)

      displayName: 'Configure IS on VM'

    - task: SSH@0
      inputs:
        sshEndpoint: 'SSH_Service_Connection' # Define a service connection in Azure DevOps
        runOptions: inline
        scriptPath: 'deploy/Deploy.sh'
      displayName: 'Deploy IS on AKS'
      env:
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        AZURE_RESOURCE_GROUP: $(AZURE_RESOURCE_GROUP)
        AKS_NAME: $(AKS_NAME)

    - script: |
        #!/bin/bash

        # Install Azure-CLI
        sudo apt-get update
        sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg -y

        sudo mkdir -p /etc/apt/keyrings
        curl -sLS https://packages.microsoft.com/keys/microsoft.asc |
            gpg --dearmor |
            sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
        sudo chmod go+r /etc/apt/keyrings/microsoft.gpg

        AZ_DIST=$(lsb_release -cs)
        echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_DIST main" |
            sudo tee /etc/apt/sources.list.d/azure-cli.list -y

        sudo apt-get update
        sudo apt-get install azure-cli -y

        # Install kubectl 
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl

        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg -y

        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list -y

        sudo apt-get update
        sudo apt-get install -y kubectl

        # Install Helm
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list -y
        sudo apt-get update
        sudo apt-get install helm -y

        # Login to Azure
        az login --use-device-code
        az account set --subscription $AZURE_SUBSCRIPTION_ID
        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AKS_NAME --overwrite-existing

        kubectl apply -f ./Service_Account/is-role.yaml
        kubectl apply -
