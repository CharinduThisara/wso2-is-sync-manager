trigger: none

variables:
  MAVEN_VERSION: '3.6.3'
  JAVA_HOME_PATH: '/usr/lib/jvm/java-1.8.0-openjdk-amd64'
  AKS_NAME1: 'wso2-is-eastus'
  AKS_NAME2: 'wso2is-cluster-central-us'
  IS_HOME_PATH: '$(Build.SourcesDirectory)/wso2is-7.0.0'
  IMAGE_NAME: is7.0
  TAG: active

  # Define the following variables in the Azure DevOps pipeline
  # AZURE_SUBSCRIPTION_ID: 'your_subscription_id'
  # AZURE_RESOURCE_GROUP: 'your_resource_group'
  # ACR_NAME: 'acrasgardeomainrnd001'
  # ACR_LOGIN_SERVER: 'your_acr_login_server'
  # ACR_USERNAME: 'your_acr_username'
  # ACR_PASSWORD: 'your_acr_password'
  # VM_USER: 'your_vm_username'
  # VM_HOST: 'your_vm_ip_or_hostname'
  # SSH_PRIVATE_KEY: 'your_ssh_private_key_secret'
  # AZURE_RESOURCE_GROUP_ACR: 'blabla'

stages: 
- stage: BuildAndPush
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: BuildAndPushJob
    steps:
    - script: |
        # Install Java 8
        sudo apt-get update
        sudo apt-get install openjdk-8-jdk

        # Set Java 8 as default
        sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_version/bin/java

        # Verify Java installation
        java -version
      displayName: 'Install and Set Java 8 as Default'
      
    - script: |
        # Specify the Maven version you want to install
        MAVEN_VERSION=${{ variables.MAVEN_VERSION }}

        # Remove existing Maven installation (if any)
        sudo rm -rf /opt/apache-maven-*
        sudo rm -rf /usr/local/bin/mvn

        # Download specified Maven version
        wget "https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz"

        # Extract Maven archive
        sudo tar xf "apache-maven-$MAVEN_VERSION-bin.tar.gz" -C /opt/

        # Create a symbolic link to the new Maven installation
        sudo ln -s "/opt/apache-maven-$MAVEN_VERSION" /opt/maven
        sudo ln -s "/opt/maven/bin/mvn" /usr/local/bin/mvn

        # Clean up downloaded archive
        rm "apache-maven-$MAVEN_VERSION-bin.tar.gz"

        # Verify installation
        mvn -version
      displayName: 'Install and Set Maven Version'

    - script: |
        # Add Docker's official GPG key:
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        
        # Add the repository to Apt sources:
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      displayName: 'Install Docker'

    - script: |
        # Download WSO2 IS 7.0.0 pack
        wget "https://github.com/wso2/product-is/releases/download/v7.0.0/wso2is-7.0.0.zip"
        unzip wso2is-7.0.0.zip -d $(Build.SourcesDirectory)
        rm wso2is-7.0.0.zip
      displayName: 'Download and Unzip WSO2 IS 7.0.0 Pack'

    - script: |
        echo "Building the Agent jar files"

        cd SyncAgent-read
        JAVA_HOME=${{ variables.JAVA_HOME_PATH }} mvn clean install
        cd ..

        cd SyncAgent-write
        JAVA_HOME=${{ variables.JAVA_HOME_PATH }} mvn clean install
        cd ..

        echo "Copying the Agent jar files to the WSO2 IS 7.0.0"
        rm ${{ variables.IS_HOME_PATH }}/repository/components/dropins/com.sync.tool-1.0-SNAPSHOT.jar
        cp SyncAgent-read/target/com.sync.tool-1.0-SNAPSHOT.jar ${{ variables.IS_HOME_PATH }}/repository/components/dropins/

        rm ${{ variables.IS_HOME_PATH }}/repository/components/dropins/org.wso2.custom.user.operation.event.listener-1.0-SNAPSHOT.jar
        cp SyncAgent-write/target/org.wso2.custom.user.operation.event.listener-1.0-SNAPSHOT.jar ${{ variables.IS_HOME_PATH }}/repository/components/dropins/

        echo "Copying the reference.conf configuration files to the WSO2 IS 7.0.0"
        rm ${{ variables.IS_HOME_PATH }}/repository/conf/reference.conf
        cp config/reference.conf ${{ variables.IS_HOME_PATH }}/repository/conf/

        echo "Copying the deployment.toml configuration files to the WSO2 IS 7.0.0"
        rm ${{ variables.IS_HOME_PATH }}/repository/conf/deployment.toml
        cp config/deployment.toml ${{ variables.IS_HOME_PATH }}/repository/conf/

        echo "Copying the libraries to the WSO2 IS 7.0.0"
        cp lib/* ${{ variables.IS_HOME_PATH }}/repository/components/lib/
        cp dropins/* ${{ variables.IS_HOME_PATH }}/repository/components/dropins/

        ls ${{ variables.IS_HOME_PATH }}/repository/components/lib -la
        echo "---------------------------------------------------------------------"
        echo "---------------------------------------------------------------------"
        ls ${{ variables.IS_HOME_PATH }}/repository/components/dropins -la

        echo  
        echo "Build Completed Successfully"
      displayName: 'Build Project'

    - task: AzureCLI@2
      inputs:
        addSpnToEnvironment: true
        azureSubscription: $(AZURE_SERVICE_CONNECTION_NAME)
        scriptLocation: 'inlineScript'
        scriptType: 'bash'
        inlineScript: |
          # Login to ACR
          az acr login --name $ACR_NAME
          
          docker build -t $IMAGE_NAME:$TAG .
          docker tag $IMAGE_NAME:$TAG $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG
      displayName: 'Login to ACR and Build and Push Docker Image'

# add manual validation for the deployment
- stage: ManualValidation
  pool: server
  jobs:
  - job: ManualValidationJob
    displayName: 'Manual Validation'
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: ''
        instructions: 'Please review and approve the deployment.'
        onTimeout: 'reject'
      displayName: 'Manual Validation Step'

- stage: Deploy
  pool: 
    vmImage: 'ubuntu-latest'
  jobs:
  - job: DeployJob
    steps:
    - task: SSH@0
      inputs:
        sshEndpoint: $(SSH_EAST)
        runOptions: 'inline'
        readyTimeout: '20000'
        inline: |
          export AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
          export AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP
          export AKS_NAME=$AKS_NAME

          cd /home/azureuser/wso2-is-sync-manager/deploy
          chmod +x Deploy.sh
          ./Deploy.sh
      env:
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
        AZURE_RESOURCE_GROUP: $(AZURE_RESOURCE_GROUP)
        AKS_NAME: $(AKS_NAME1)